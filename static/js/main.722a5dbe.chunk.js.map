{"version":3,"sources":["App.js","serviceWorker.js","index.js","logo.svg"],"names":["App","React","useState","state","setState","className","bannerColor","href","src","logo","alt","Button","variant","color","onClick","a","fetch","then","res","json","data","JSON","stringify","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","module","exports"],"mappings":"2TA0CeA,MAjCf,WAAgB,IAAD,EAEaC,IAAMC,SAAS,IAF5B,mBAENC,EAFM,KAECC,EAFD,KAIb,OACE,yBAAKC,UAAU,OACb,kBAAC,IAAD,CAAcC,YAAa,UAAWC,KAAK,sCAC3C,6BAASF,UAAU,cACjB,uDACA,yBAAKG,IAAKC,IAAMJ,UAAU,WAAWK,IAAI,SACzC,yBAAKF,IAAG,UAZE,+CAYgBH,UAAU,WAAWK,IAAI,yBAGrD,6BAASL,UAAU,cACjB,mDACA,kBAACM,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,UAAUC,QAAO,sBAAE,4BAAAC,EAAA,sEAEhCC,MAAM,4CAA4CC,MAAK,SAACC,GACzE,OAAOA,EAAIC,UAHsC,OAE7CC,EAF6C,OAMnDhB,EAAS,CACPgB,SAPiD,4CAArD,gBAYA,6BAAMC,KAAKC,UAAUnB,EAAO,KAAM,OCvBpCoB,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAqCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTb,MAAK,SAAAkB,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBlC,QACf6B,UAAUC,cAAcO,YAI1BC,QAAQC,IACN,iHAKEX,GAAUA,EAAOY,UACnBZ,EAAOY,SAASR,KAMlBM,QAAQC,IAAI,sCAGRX,GAAUA,EAAOa,WACnBb,EAAOa,UAAUT,WAO5BU,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MC1FjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDiB1C,SAAkBnB,GACvB,GAAI,kBAAmBC,UAAW,CAGhC,GADkB,IAAImB,IAAIC,GAAwB3B,OAAOC,SAASnB,MACpD8C,SAAW5B,OAAOC,SAAS2B,OAIvC,OAGF5B,OAAO6B,iBAAiB,QAAQ,WAC9B,IAAMxB,EAAmB,UAAMsB,GAAjB7B,EAAW,sCACrBA,IAgEV,SAAiCO,EAAOC,GAEtCf,MAAMc,EAAO,CACXyB,QAAS,CAAE,iBAAkB,YAE5BtC,MAAK,SAAAuC,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C5B,UAAUC,cAAc4B,MAAM5C,MAAK,SAAAkB,GACjCA,EAAa2B,aAAa7C,MAAK,WAC7BQ,OAAOC,SAASqC,eAKpBlC,EAAgBC,EAAOC,MAG1Bc,OAAM,WACLJ,QAAQC,IACN,oEAvFAsB,CAAwBlC,EAAOC,GAI/BC,UAAUC,cAAc4B,MAAM5C,MAAK,WACjCwB,QAAQC,IACN,iHAMJb,EAAgBC,EAAOC,OCvC/BE,I,kBCXAgC,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.722a5dbe.chunk.js","sourcesContent":["import React from 'react';\nimport GithubCorner from 'react-github-corner';\nimport Button from '@material-ui/core/Button';\n\nimport logo from './logo.svg';\nimport './App.css';\n\nconst cachedUrl = 'https://pwa.transmute.world/logo-cached.svg'\n\nfunction App() {\n\n  const [state, setState] = React.useState({});\n\n  return (\n    <div className=\"App\">\n      <GithubCorner bannerColor={'#64CEAA'} href=\"https://github.com/OR13/react-pwa\" />\n      <section className=\"sw-section\">\n        <h3>Serving SVGs from SW...</h3>\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <img src={`${cachedUrl}`} className=\"App-logo\" alt=\"service-worker-logo\" />\n      </section>\n\n      <section className=\"sw-section\">\n        <h3>HTTP Interceptor...</h3>\n        <Button variant=\"contained\" color=\"primary\" onClick={async ()=>{\n  \n          const data = await fetch('https://pwa.transmute.world/kms/keystore').then((res)=>{\n            return res.json()\n          });\n        \n          setState({\n            data\n          })\n        }}>\n          Make Request\n        </Button>\n        <pre>{JSON.stringify(state, null, 2)}</pre>\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n"," /* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if ('serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = isLocalhost ? `${process.env.PUBLIC_URL}/custom-sw.js` : `${process.env.PUBLIC_URL}/service-worker.js`;\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}